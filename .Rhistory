output: html_document
# This command tells R to transform the information in the variable "data" into a *.csv file.
# Saved the *.csv file into into the "path" selected, my HINQ302Assessment_2 repo.
# This was done by choosing the directory in the files pane, selecting more button (cog) and selecting copy folder path to clipboard.
# The copied folder path is inserted between "" in the code below.
# Important to name the file, ending in .csv or it wont save, just get error messages.
write.csv(data,"C:/HINQ302Assessment_2/before.csv")
rmarkdown::render("before")
# This command tells R to transform the information in the variable "data" into a *.csv file.
# Saved the *.csv file into into the "path" selected, my HINQ302Assessment_2 repo.
# This was done by choosing the directory in the files pane, selecting more button (cog) and selecting copy folder path to clipboard.
# The copied folder path is inserted between "" in the code below.
# Important to name the file, ending in .csv or it wont save, just get error messages.
write.csv(data,"C:/HINQ302Assessment_2/web/Portfolio_task_01/before.csv")
rmarkdown::render("before")
rmarkdown::render("before.csv")
library(readr)
before <- read_csv("Portfolio_task_01/before.csv")
View(before)
rmarkdown::render("before")
library(pdftools)
# First step is to load our libraries
# remember, you might need to run the command `install.packages("pdftools")` once to install the package
install.packages("pdftools")
# First step is to load our libraries
# remember, you might need to run the command `install.packages("pdftools")` once to install the package
# install.packages("pdftools")
install.packages("tesseract")
# First step is to load our libraries
# remember, you might need to run the command `install.packages("pdftools")` once to install the package
# install.packages("pdftools")
# install.packages("tesseract")
install.packages("tm")
library(pdftools)
library(tesseract)
library(tm)
rm(list=ls())
setwd('C:/HINQ302Assessment_2/web/Portfolio_task_03/Corpus')
files <- list.files(path=".", pattern = "pdf$", recursive = TRUE, include.dirs = TRUE)
head(files) # This will produce a list of the files you have imported (or a selection of them)
class(files) # This tells us that 'files' is a character object. At present though, we just have the file names and nothing more
# now we have our text, we need to organise it a little and add it to a corpus using the TM library ('text mining')
corp <- Corpus(URISource(files),
readerControl = list(reader = readPDF))
writeCorpus(corp) #this will output each of the converted text files to individual text files in your working directory. Take a look now.
library(readr)
all_tags <- read_csv("C:/HINQ302Assessment_2/web/Portfolio_task_03/all_tags.csv")
View(all_tags)
library(MASS)
data(all_tags)
head(all_tags)
DT::datatable(all_tags, filter="top", options = list(pageLength = 1522))
library(MASS)
data(all_tags)
head(all_tags)
DT::datatable(all_tags.csv, filter="top", options = list(pageLength = 1522))
library(readr)
alltags <- read_csv("C:/HINQ302Assessment_2/web/Portfolio_task_03/alltags.csv")
View(alltags)
library(MASS)
data(alltags)
head(alltags)
DT::datatable(alltags, filter="top", options = list(pageLength = 1522))
library(MASS)
data(alltags)
head(alltags)
DT::datatable(alltags.csv, filter="top", options = list(pageLength = 1522))
library(MASS)
data(alltags)
head(alltags)
DT::datatable(alltags, filter="top", options = list(pageLength = 1522))
library(readr)
pickle <- read_csv("C:/HINQ302Assessment_2/web/Portfolio_task_03/pickle.csv")
View(pickle)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1522))
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1522))
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1522))
knitr::opts_chunk$set(error = TRUE)
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1522))
knitr::opts_chunk$set(error = TRUE)
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1522))
knitr::opts_chunk$set(error = TRUE)
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1522))
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle.csv, filter="top", options = list(pageLength = 1522))
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1522))
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(widgetframe)
library(MASS)
data(pickle.csv)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(widgetframe)
library(MASS)
data(pickle)
head(pickle.csv)
knitr::opts_chunk$set(error = FALSE)
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library("knitr")
knit2html("file")
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library("knitr")
knit2html("pickle")
library(readr)
pickle <- read_csv("C:/HINQ302Assessment_2/web/Portfolio_task_03/pickle.csv")
View(pickle)
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
install.packages(c("bit", "data.table", "glmnet", "Hmisc", "jpeg", "png", "raster", "sass", "terra", "vctrs", "xfun"))
install.packages(c("bit", "data.table", "glmnet", "Hmisc", "jpeg", "png", "raster", "sass", "terra", "vctrs", "xfun"))
install.packages(c("bit", "data.table", "glmnet", "Hmisc", "jpeg", "png", "raster", "sass", "terra", "vctrs", "xfun"))
knitr::opts_chunk$set(error = FALSE)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
exists("pickle")
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(readr)
trudy <- read_csv("C:/HINQ302Assessment_2/web/Portfolio_task_03/trudy.csv")
View(trudy)
library(MASS)
data(trudy)
head(trudy)
DT::datatable(trudy, filter="top", options = list(pageLength = 1522))
library(MASS)
data(trudy)
data(trudy.csv)
read.csv(trudy)
read.csv(trudy.csv)
View(trudy)
head(trudy)
DT::datatable(trudy, filter="top", options = list(pageLength = 1522))
DT::datatable(trudy, filter="top", options = list(pageLength = 1522))
head(trudy)
DT::datatable(trudy, filter="top", options = list(pageLength = 1522))
rmarkdown::render("trudy")
View(trudy)
data(trudy)
head(trudy)
DT::datatable(trudy, filter="top", options = list(pageLength = 1521))
data(trudy)
head(trudy)
DT::datatable(C:/HINQ302Assessment_2/web/Portfolio_task_03/trudy.csv, filter="top", options = list(pageLength = 1521))
data(trudy)
head(trudy)
DT::datatable(C:/HINQ302Assessment_2/web/Portfolio_task_03/trudy, filter="top", options = list(pageLength = 1521))
data(trudy)
head(trudy)
DT::datatable(C:HINQ302Assessment_2/web/Portfolio_task_03/trudy, filter="top", options = list(pageLength = 1521))
data(C:HINQ302Assessment_2/web/Portfolio_task_03/trudy)
head(C:HINQ302Assessment_2/web/Portfolio_task_03/trudy)
data(C:HINQ302Assessment_2/web/Portfolio_task_03/trudy)
head(trudy)
DT::datatable(C:HINQ302Assessment_2/web/Portfolio_task_03/trudy, filter="top", options = list(pageLength = 1521))
library(knitr)
kable("C:/HINQ302Assessment_2/testcodebook.csv"[29:3, ], caption="code")
library(knitr)
kable("c:/HINQ302Assessment_2/testcodebook.csv"[29:3, ], caption="code")
library(knitr)
kable(testcodebook[29:3, ], caption="code")
library(readr)
testcodebook <- read_csv("C:/HINQ302Assessment_2/testcodebook.csv")
View(testcodebook)
library(knitr)
kable(testcodebook[29:3, ], caption="code")
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
render("C:/HINQ302Assessment_2/testcodebook.csv", output_format = "html_document")
library(rmarkdown)
render("testcodebook.csv", output_format = "html_document")
library(rmarkdown)
render("C:/HINQ302Assessment_2/testcodebook", output_format = "html_document")
library(rmarkdown)
render("C:/HINQ302Assessment_2/testcodebook.csv", output_format = "html_document")
rhandsontable:::editAddin()
View(testcodebook)
rhandsontable:::editAddin()
View(testcodebook)
View(testcodebook)
render_html(testcodebook)
render(testcodebook)
install.packages("rio")
install.packages("rtools")
install.packages(c("jpeg", "png", "xfun"))
install.packages(c("jpeg", "png", "xfun"))
install.packages(c("jpeg", "png", "xfun"))
install.packages(c("jpeg", "png", "xfun"))
library(rio)
install_formats("arrow")
library(data.table)
library(dataframes2xls)
install.packages("data.frame")
library(data.frame)
x <- import("testcodebook.csv")
x <- import("C:/HINQ302Assessment_2/web/testcodebook.csv")
knitr::opts_chunk$set(echo = TRUE)
\center poopoo \center
center poopoo center
\begin{center} poopoo \end{center}
\\center __poopoo__ \\center
library(htmltools)
library(htmlwidgets)
<center> poopoo </center>
center poopoo /center
center poopoo center
#### poopoo
knitr::opts_chunk$set(echo = TRUE)
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
blogdown:::preview_site()
<i class="fas fa-exclamation"></i>
knitr::opts_chunk$set(echo = TRUE)
library(htmltools)
library(htmlwidgets)
install.packages("i-tag")
install.packages(" fontawesome")
library( fontawesome)
library(fontawesome)
library(i-tag)
install.packages("itag")
library(itag)
fontawesome::fa('lightbulb')
fontawesome::fa('exclamation')
fontawesome::fa('exclamation',height='30px',fill='steelblue')
fontawesome::fa('exclamation',height='30px',fill='steelblue')
fontawesome::fa('exclamation',height='30px',fill='steelblue')
dfhgggggggggggggggggggggggggggggggggggggggggggggggggggrttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt
fontawesome::fa('exclamation',height='30px',fill='steelblue')
fontawesome::fa('exclamation',height='50px',fill='steelblue')
fontawesome::fa('exclamation',height='50px',fill='steelblue')
library(pandoc)
fontawesome::fa('exclamation',height='50px',fill='steelblue')
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
install.packages("boxy")
library(boxy)
# Load Libraries
library(blogdown)
# stop the server in case running from a previous session.
stop_server()
# update site build
blogdown::build_site()
# serve site
blogdown::serve_site()
library(htmltools)
library(htmlwidgets)
library(htmltools)
library(htmlwidgets)
library(div)
install.packages("div")
library(div)
knitr::opts_chunk$set(echo = False)
knitr::opts_chunk$set(echo = True)
library(htmltools)
library(htmlwidgets)
[Imgur](https://i.imgur.com/Hip3izC.png)
Imgur(https://i.imgur.com/Hip3izC.png)
blogdown:::preview_site()
knitr::opts_chunk$set(echo = TRUE)
library(htmltools)
library(htmlwidgets)
a href="https://imgur.com/rx754hP"><img src="https://i.imgur.com/rx754hP.png" title="source: imgur.com" /></a
knitr::opts_chunk$set(echo = TRUE)
serve site
blogdown::serve_site()
blogdown::serve_site()
library(blogdown)
blogdown::serve_site()
blogdown::serve_site(C:/Users/Trudy/AppData/Roaming/Hugo/0.104.3/hugo.exe server)
View(C:/Users/Trudy/AppData/Roaming/Hugo/0.104.3/hugo.exe server)
View(Users/Trudy/AppData/Roaming/Hugo/0.104.3/hugo.exe server)
blogdown:::serve_site()
blogdown:::update_meta_addin()
cd blogdown::
cd blogdown
install_hugo()
# Now set options to customize the behavior of blogdown for this project. Below
# are a few sample options; for more options, see
# https://bookdown.org/yihui/blogdown/global-options.html
options(
# to automatically serve the site on RStudio startup, set this option to TRUE
blogdown.serve_site.startup = True,
# to disable knitting Rmd files on save, set this option to FALSE
blogdown.knit.on_save = TRUE,
# build .Rmd to .html (via Pandoc); to build to Markdown, set this option to 'markdown'
blogdown.method = 'html'
)
# Now set options to customize the behavior of blogdown for this project. Below
# are a few sample options; for more options, see
# https://bookdown.org/yihui/blogdown/global-options.html
options(
# to automatically serve the site on RStudio startup, set this option to TRUE
blogdown.serve_site.startup = True,
# to disable knitting Rmd files on save, set this option to FALSE
blogdown.knit.on_save = TRUE,
# build .Rmd to .html (via Pandoc); to build to Markdown, set this option to 'markdown'
blogdown.method = 'html'
)
# Now set options to customize the behavior of blogdown for this project. Below
# are a few sample options; for more options, see
# https://bookdown.org/yihui/blogdown/global-options.html
options(
# to automatically serve the site on RStudio startup, set this option to TRUE
blogdown.serve_site.startup = True,
# to disable knitting Rmd files on save, set this option to FALSE
blogdown.knit.on_save = TRUE,
# build .Rmd to .html (via Pandoc); to build to Markdown, set this option to 'markdown'
blogdown.method = 'html'
)
# Now set options to customize the behavior of blogdown for this project. Below
# are a few sample options; for more options, see
# https://bookdown.org/yihui/blogdown/global-options.html
options(
# to automatically serve the site on RStudio startup, set this option to TRUE
blogdown.serve_site.startup =True,
# to disable knitting Rmd files on save, set this option to FALSE
blogdown.knit.on_save = TRUE,
# build .Rmd to .html (via Pandoc); to build to Markdown, set this option to 'markdown'
blogdown.method = 'html'
)
# Now set options to customize the behavior of blogdown for this project. Below
# are a few sample options; for more options, see
# https://bookdown.org/yihui/blogdown/global-options.html
options(
# to automatically serve the site on RStudio startup, set this option to TRUE
blogdown.serve_site.startup=True,
# to disable knitting Rmd files on save, set this option to FALSE
blogdown.knit.on_save = TRUE,
# build .Rmd to .html (via Pandoc); to build to Markdown, set this option to 'markdown'
blogdown.method = 'html'
)
# Now set options to customize the behavior of blogdown for this project. Below
# are a few sample options; for more options, see
# https://bookdown.org/yihui/blogdown/global-options.html
options(
# to automatically serve the site on RStudio startup, set this option to TRUE
blogdown.serve_site.startup= TRUE,
# to disable knitting Rmd files on save, set this option to FALSE
blogdown.knit.on_save = TRUE,
# build .Rmd to .html (via Pandoc); to build to Markdown, set this option to 'markdown'
blogdown.method = 'html'
)
# Now set options to customize the behavior of blogdown for this project. Below
# are a few sample options; for more options, see
# https://bookdown.org/yihui/blogdown/global-options.html
options(
# to automatically serve the site on RStudio startup, set this option to TRUE
blogdown.serve_site.startup= TRUE,
# to disable knitting Rmd files on save, set this option to FALSE
blogdown.knit.on_save = TRUE,
# build .Rmd to .html (via Pandoc); to build to Markdown, set this option to 'markdown'
blogdown.method = 'html'
)
# Now set options to customize the behavior of blogdown for this project. Below
# are a few sample options; for more options, see
# https://bookdown.org/yihui/blogdown/global-options.html
options(
# to automatically serve the site on RStudio startup, set this option to TRUE
blogdown.serve_site.startup= TRUE,
# to disable knitting Rmd files on save, set this option to FALSE
blogdown.knit.on_save = TRUE,
# build .Rmd to .html (via Pandoc); to build to Markdown, set this option to 'markdown'
blogdown.method = 'html'
)
# fix Hugo version
options(blogdown.hugo.version = "0.104.3")
install.packages("pandoc")
library(hugo)
library(pandoc)
install.packages("blogdown")
blogdown:::preview_site(startup = TRUE)
install.packages("blogdown")
install.packages("blogdown")
library(blogdown)
# fix Hugo version
options(blogdown.hugo.version = "0.108.0")
install.packages("rtools")
library(rtools)
<iframe src='https://cdn.knightlab.com/libs/timeline3/latest/embed/index.html?source=1NdWoKvVDG3Q80TRBKJcqc9zv_UevfQbn2MaFcqnWN_8&font=Default&lang=en&initial_zoom=2&height=650' width='100%' height='650' webkitallowfullscreen mozallowfullscreen allowfullscreen frameborder='0'></iframe>
install.packages("iframe")
library(iframe)
https://cdn.knightlab.com/libs/timeline3/latest/embed/index.html?source=1NdWoKvVDG3Q80TRBKJcqc9zv_UevfQbn2MaFcqnWN_8&font=Default&lang=en&initial_zoom=2&height=650
https://cdn.knightlab.com/libs/timeline3/latest/embed/index.html?source=1NdWoKvVDG3Q80TRBKJcqc9zv_UevfQbn2MaFcqnWN_8&font=Default&lang=en&initial_zoom=2&height=650
install.packages("pkgdown")
library(pkgdown)
blogdown:::preview_site(startup = TRUE)
# Load Libraries
library(blogdown)
# stop the server in case running from a previous session.
stop_server()
# update site build
blogdown::build_site()
# serve site
blogdown::serve_site()
# check site if needed -- before publishing
check_site()
# Runs checks on validity of YAML metadata in posts, good if you have weird errors.
blogdown::check_content()
file.remove(c(
"content/task 1/SCRIPT-for-cemetery.html",
"content/task 3/scriptpdftotext.html"
))
blogdown::build_site(build_rmd = "newfile")
# Runs checks on validity of YAML metadata in posts, good if you have weird errors.
blogdown::check_content()
# Runs checks on validity of YAML metadata in posts, good if you have weird errors.
blogdown::check_content()
# update site build
blogdown::build_site()
# serve site
blogdown::serve_site()
# check site if needed -- before publishing
check_site()
# check site if needed -- before publishing
check_site()
# check site if needed -- before publishing
check_site()
# check site if needed -- before publishing
check_site()
# Runs checks on validity of YAML metadata in posts, good if you have weird errors.
blogdown::check_content()
blogdown::build_site()
blogdown::serve_site()
# Load Libraries
library(blogdown)
# stop the server in case running from a previous session.
stop_server()
# update site build
blogdown::build_site()
# serve site
blogdown::serve_site()
# check site if needed -- before publishing
check_site()
# Runs checks on validity of YAML metadata in posts, good if you have weird errors.
blogdown::check_content()
