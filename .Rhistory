data(before)
head(before)
DT::datatable(before, filter="top", options = list(pageLength = 59))
library(utf8)
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
DT::datatable(before, filter="top", options = list(pageLength = 59))
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
DT::data.table(before, filter="top", options = list(pageLength = 59))
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
data.table::data.table(before)
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
DT::datatable(before, filter="top", options = list(pageLength = 59))
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
DT::datatable(before, filter="top", options = list(pageLength = 59))
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
DT::datatable(before, filter="top", options = list(pageLength = 58))
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
library(readr)
before <- read_csv("Portfolio_task_01/before.csv")
View(before)
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
DT::datatable(before, filter="top", options = list(pageLength = 58))
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
library( htmltools )
library( htmlwidgets )
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
DT::datatable(before, filter="top", options = list(pageLength = 58))
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
DT::datatable(before,filter="top",options = list(pageLength = 58))
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
DT::datatable(before,filter="top",options=list(pageLength=58))
install.packages("UTF-8")
library(utf8)
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
DT::datatable(before,filter="top",options=list(pageLength=58))
View(before)
library(readr)
before <- read_csv("Portfolio_task_01/before.csv")
View(before)
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
DT::datatable(before,filter="top",options=list(pageLength=59))
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
DT::datatable(before, filter="top", options = list(pageLength = 59))
library( leaflet )
library(leaflet)
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
DT::datatable(before, filter="top", options = list(pageLength = 59))
saveWidget( widget = before
, file = "before.html" )
saveWidget(widget = before
, file = "before.html")
save(csv=before)
install.packages("laply")
library(lapply(list, function))
install.packages("sprintf")
library(sprintf)
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
DT::datatable(before, filter="top", options = list(pageLength = 59))
library(readr)
before <- read_csv("Portfolio_task_01/before.csv")
View(before)
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
DT::datatable(before, filter="top", options = list(pageLength = 59))
library(readr)
before <- read_csv("Portfolio_task_01/before.csv")
View(before)
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
head(before)
DT::datatable(before, filter="top", options = list(pageLength = 59))
view(before)
View(before)
print(before)
knitr::opts_chunk$set(eval = FALSE, echo = TRUE)
library(MASS)
data(before)
DT::datatable(before, filter="top", options = list(pageLength = 59))
blogdown:::preview_site()
library("rvest")
library("tidyverse")
library ("xml2")
# Sent a HTTP request to the desired server and downloaded the HTML file
url <-read_html("http://www.australiancemeteries.com.au/qld/brisbane/st_helena/st_helena_prisoners_data.htm")
# Created a new variable called tables
# Used a pipe operator so the result of the first command is carried to the next, left to right.
# The url variable (below) is run by the html_table function (below).
# This command parses the result as a new variable, "tables".
# Will list tables found in the html code of the sites website.
tables <- url %>% html_table(fill = TRUE)
# This command parses the data from table 2 into a new variable "data".
# The number 2 signifies we want the second table.
# Can inspect the results from the data variable in the Environment pane.
data <- (tables[[2]])
# This command tells R to transform the information in the variable "data" into a *.csv file.
# Saved the *.csv file into into the "path" selected, my HINQ302Assessment_2 repo.
# This was done by choosing the directory in the files pane, selecting more button (cog) and selecting copy folder path to clipboard.
# The copied folder path is inserted between "" in the code below.
# Important to name the file, ending in .csv or it wont save, just get error messages.
write.csv(data,"C:/HINQ302Assessment_2/australian_cem_St_Helena_Island.csv")
rmarkdown::render("analysis.R")
rmarkdown::render("Australian_Cem_St_Helena_Island_Script.R")
rmarkdown::render("Australian_Cem_St_Helena_Island_Script")
View(url)
xml_attrs(url)[["xmlns"]]
xml_attrs(xml_child(xml_child(url, 2), 13))
url
library(MASS)
data(url)
Head(url)
# Web scraper script for Australian Cemeteries St Helena
# Trudy Boan
# 4/8/2022
output: html_document
output: html_document
install.packages("roxygen2")
library(roxygen2)
output: html_document
# This command tells R to transform the information in the variable "data" into a *.csv file.
# Saved the *.csv file into into the "path" selected, my HINQ302Assessment_2 repo.
# This was done by choosing the directory in the files pane, selecting more button (cog) and selecting copy folder path to clipboard.
# The copied folder path is inserted between "" in the code below.
# Important to name the file, ending in .csv or it wont save, just get error messages.
write.csv(data,"C:/HINQ302Assessment_2/before.csv")
rmarkdown::render("before")
# This command tells R to transform the information in the variable "data" into a *.csv file.
# Saved the *.csv file into into the "path" selected, my HINQ302Assessment_2 repo.
# This was done by choosing the directory in the files pane, selecting more button (cog) and selecting copy folder path to clipboard.
# The copied folder path is inserted between "" in the code below.
# Important to name the file, ending in .csv or it wont save, just get error messages.
write.csv(data,"C:/HINQ302Assessment_2/web/Portfolio_task_01/before.csv")
rmarkdown::render("before")
rmarkdown::render("before.csv")
library(readr)
before <- read_csv("Portfolio_task_01/before.csv")
View(before)
rmarkdown::render("before")
library(pdftools)
# First step is to load our libraries
# remember, you might need to run the command `install.packages("pdftools")` once to install the package
install.packages("pdftools")
# First step is to load our libraries
# remember, you might need to run the command `install.packages("pdftools")` once to install the package
# install.packages("pdftools")
install.packages("tesseract")
# First step is to load our libraries
# remember, you might need to run the command `install.packages("pdftools")` once to install the package
# install.packages("pdftools")
# install.packages("tesseract")
install.packages("tm")
library(pdftools)
library(tesseract)
library(tm)
rm(list=ls())
setwd('C:/HINQ302Assessment_2/web/Portfolio_task_03/Corpus')
files <- list.files(path=".", pattern = "pdf$", recursive = TRUE, include.dirs = TRUE)
head(files) # This will produce a list of the files you have imported (or a selection of them)
class(files) # This tells us that 'files' is a character object. At present though, we just have the file names and nothing more
# now we have our text, we need to organise it a little and add it to a corpus using the TM library ('text mining')
corp <- Corpus(URISource(files),
readerControl = list(reader = readPDF))
writeCorpus(corp) #this will output each of the converted text files to individual text files in your working directory. Take a look now.
library(readr)
all_tags <- read_csv("C:/HINQ302Assessment_2/web/Portfolio_task_03/all_tags.csv")
View(all_tags)
library(MASS)
data(all_tags)
head(all_tags)
DT::datatable(all_tags, filter="top", options = list(pageLength = 1522))
library(MASS)
data(all_tags)
head(all_tags)
DT::datatable(all_tags.csv, filter="top", options = list(pageLength = 1522))
library(readr)
alltags <- read_csv("C:/HINQ302Assessment_2/web/Portfolio_task_03/alltags.csv")
View(alltags)
library(MASS)
data(alltags)
head(alltags)
DT::datatable(alltags, filter="top", options = list(pageLength = 1522))
library(MASS)
data(alltags)
head(alltags)
DT::datatable(alltags.csv, filter="top", options = list(pageLength = 1522))
library(MASS)
data(alltags)
head(alltags)
DT::datatable(alltags, filter="top", options = list(pageLength = 1522))
library(readr)
pickle <- read_csv("C:/HINQ302Assessment_2/web/Portfolio_task_03/pickle.csv")
View(pickle)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1522))
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1522))
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1522))
knitr::opts_chunk$set(error = TRUE)
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1522))
knitr::opts_chunk$set(error = TRUE)
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1522))
knitr::opts_chunk$set(error = TRUE)
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1522))
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle.csv, filter="top", options = list(pageLength = 1522))
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1522))
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(widgetframe)
library(MASS)
data(pickle.csv)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(widgetframe)
library(MASS)
data(pickle)
head(pickle.csv)
knitr::opts_chunk$set(error = FALSE)
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library("knitr")
knit2html("file")
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library("knitr")
knit2html("pickle")
library(readr)
pickle <- read_csv("C:/HINQ302Assessment_2/web/Portfolio_task_03/pickle.csv")
View(pickle)
library(widgetframe)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
install.packages(c("bit", "data.table", "glmnet", "Hmisc", "jpeg", "png", "raster", "sass", "terra", "vctrs", "xfun"))
install.packages(c("bit", "data.table", "glmnet", "Hmisc", "jpeg", "png", "raster", "sass", "terra", "vctrs", "xfun"))
install.packages(c("bit", "data.table", "glmnet", "Hmisc", "jpeg", "png", "raster", "sass", "terra", "vctrs", "xfun"))
knitr::opts_chunk$set(error = FALSE)
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
exists("pickle")
library(MASS)
data(pickle)
head(pickle)
DT::datatable(pickle, filter="top", options = list(pageLength = 1521))
library(readr)
trudy <- read_csv("C:/HINQ302Assessment_2/web/Portfolio_task_03/trudy.csv")
View(trudy)
library(MASS)
data(trudy)
head(trudy)
DT::datatable(trudy, filter="top", options = list(pageLength = 1522))
library(MASS)
data(trudy)
data(trudy.csv)
read.csv(trudy)
read.csv(trudy.csv)
View(trudy)
head(trudy)
DT::datatable(trudy, filter="top", options = list(pageLength = 1522))
DT::datatable(trudy, filter="top", options = list(pageLength = 1522))
head(trudy)
DT::datatable(trudy, filter="top", options = list(pageLength = 1522))
rmarkdown::render("trudy")
View(trudy)
data(trudy)
head(trudy)
DT::datatable(trudy, filter="top", options = list(pageLength = 1521))
data(trudy)
head(trudy)
DT::datatable(C:/HINQ302Assessment_2/web/Portfolio_task_03/trudy.csv, filter="top", options = list(pageLength = 1521))
data(trudy)
head(trudy)
DT::datatable(C:/HINQ302Assessment_2/web/Portfolio_task_03/trudy, filter="top", options = list(pageLength = 1521))
data(trudy)
head(trudy)
DT::datatable(C:HINQ302Assessment_2/web/Portfolio_task_03/trudy, filter="top", options = list(pageLength = 1521))
data(C:HINQ302Assessment_2/web/Portfolio_task_03/trudy)
head(C:HINQ302Assessment_2/web/Portfolio_task_03/trudy)
data(C:HINQ302Assessment_2/web/Portfolio_task_03/trudy)
head(trudy)
DT::datatable(C:HINQ302Assessment_2/web/Portfolio_task_03/trudy, filter="top", options = list(pageLength = 1521))
library(knitr)
kable("C:/HINQ302Assessment_2/testcodebook.csv"[29:3, ], caption="code")
library(knitr)
kable("c:/HINQ302Assessment_2/testcodebook.csv"[29:3, ], caption="code")
library(knitr)
kable(testcodebook[29:3, ], caption="code")
library(readr)
testcodebook <- read_csv("C:/HINQ302Assessment_2/testcodebook.csv")
View(testcodebook)
library(knitr)
kable(testcodebook[29:3, ], caption="code")
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
render("C:/HINQ302Assessment_2/testcodebook.csv", output_format = "html_document")
library(rmarkdown)
render("testcodebook.csv", output_format = "html_document")
library(rmarkdown)
render("C:/HINQ302Assessment_2/testcodebook", output_format = "html_document")
library(rmarkdown)
render("C:/HINQ302Assessment_2/testcodebook.csv", output_format = "html_document")
rhandsontable:::editAddin()
View(testcodebook)
rhandsontable:::editAddin()
View(testcodebook)
View(testcodebook)
render_html(testcodebook)
render(testcodebook)
install.packages("rio")
install.packages("rtools")
install.packages(c("jpeg", "png", "xfun"))
install.packages(c("jpeg", "png", "xfun"))
install.packages(c("jpeg", "png", "xfun"))
install.packages(c("jpeg", "png", "xfun"))
library(rio)
install_formats("arrow")
library(data.table)
library(dataframes2xls)
install.packages("data.frame")
library(data.frame)
x <- import("testcodebook.csv")
x <- import("C:/HINQ302Assessment_2/web/testcodebook.csv")
knitr::opts_chunk$set(echo = TRUE)
\center poopoo \center
center poopoo center
\begin{center} poopoo \end{center}
\\center __poopoo__ \\center
library(htmltools)
library(htmlwidgets)
<center> poopoo </center>
center poopoo /center
center poopoo center
#### poopoo
knitr::opts_chunk$set(echo = TRUE)
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
blogdown:::preview_site()
<i class="fas fa-exclamation"></i>
knitr::opts_chunk$set(echo = TRUE)
library(htmltools)
library(htmlwidgets)
install.packages("i-tag")
install.packages(" fontawesome")
library( fontawesome)
library(fontawesome)
library(i-tag)
install.packages("itag")
library(itag)
fontawesome::fa('lightbulb')
fontawesome::fa('exclamation')
fontawesome::fa('exclamation',height='30px',fill='steelblue')
fontawesome::fa('exclamation',height='30px',fill='steelblue')
fontawesome::fa('exclamation',height='30px',fill='steelblue')
dfhgggggggggggggggggggggggggggggggggggggggggggggggggggrttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt
fontawesome::fa('exclamation',height='30px',fill='steelblue')
fontawesome::fa('exclamation',height='50px',fill='steelblue')
fontawesome::fa('exclamation',height='50px',fill='steelblue')
library(pandoc)
fontawesome::fa('exclamation',height='50px',fill='steelblue')
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
install.packages("boxy")
library(boxy)
# Load Libraries
library(blogdown)
# stop the server in case running from a previous session.
stop_server()
# update site build
blogdown::build_site()
# serve site
blogdown::serve_site()
library(htmltools)
library(htmlwidgets)
library(htmltools)
library(htmlwidgets)
library(div)
install.packages("div")
library(div)
knitr::opts_chunk$set(echo = False)
knitr::opts_chunk$set(echo = True)
library(htmltools)
library(htmlwidgets)
[Imgur](https://i.imgur.com/Hip3izC.png)
Imgur(https://i.imgur.com/Hip3izC.png)
